PENSE-BÊTE POUR L'USAGE DES INPUTS DANS UNE SCENE

scene->data[0]->angle += 2;
if (input->keys[SDL_SCANCODE_UP]) {
    scene->data[0]->y--;
} else if (input->keys[SDL_SCANCODE_DOWN]) {
    scene->data[0]->y++;
}
======================================================================
ALGORITHME DE PLACEMENT D'UNE TUILE SUR LE PLATEAU

// plateau grid de largeur c et de hauteur l
// tuile tile
//pinit : position sur le plateau de où on veut placer la tuile
//pi: position sur le plateau de la i-eme case de la tuile
for(int i=0; i<8; i++) {
    int pi = pinit + i%3 +(i/3)*c;
    // NB : vérifier les cas de débordements avant de mettre à jour le plateau (4 cas !!!)
    grid[pi] = tile[i];
}
=====================================================================
CODE CONCERNANT LA VERIFICATION D'UNE TUILE ET LES ENVIES DE SUICIDE DE LORNA non:)

void afficher(char tab[], int w, int h){ // tab[] = *tab
    for (int i=0; i<(w*h); i++){
        if ((i%w) == 0){
            printf("\n");
        }
        printf("(%c)", tab[i]);
    }
}

int main() {
    int nbX=0,numTuile,ligneplateau,colonneplateau,pi=0;
    int c=4,l=4; // a modifIer avec les valeurs du plateau
    char tuile[9]={'X',' ',' ',' ','1','1','1',' ',' '};//a enlever
    char plateau[16]={'X','1',' ',' ',' ',' ',' ','1','X',' ',' ',' ',' ','1',' ',' '};//a enlever une fois
    // mettre le code une fois avant

    while(nbX<1){//verifie que la tuile peut etre placé
        //printf("emplacement incorrect, l'un des motifs X doit se trouver sur un nombre");
        do{
            printf("quelle tuile voulez vous placer?(entre 1 et 5)\n");
            scanf("%d",&numTuile);
        }while(numTuile<1||numTuile>5);
        do {
            printf("ligne ou voulez vous placer la case sup gauche de la tuile\n ");
            scanf("%d", &ligneplateau);
        }while(ligneplateau<0||ligneplateau>c);
        do{
            printf("colonne ou voulez vous placer la case sup gauche de la tuile\n");
            scanf("%d", &colonneplateau);
        }while (colonneplateau<0||colonneplateau>l);

        // NE MARCHE PAS ==> A REMODIFIER (POUR LA POSITION INITIALE)
        for(int i=0;i<=8;i++){
            pi=c*(colonneplateau-1)+ligneplateau-1;  definit l'endroit p1 de  la grille ... je pense que ça marche ou pas
            if (i%3==0){
                pi=pi+c-2;//pour passer à la ligne suivante
            }
            if(tuile[i]=='X'){
                if (plateau[pi]=='1'){ //regarder comment selectionner la bonne case du plateau et aussi pour mettre des nombres autre que 1
                    nbX++;
                }

            }

        }
    }

    // NE MARCHE PAS ==> A REMODIFIER
    for (int j=0;j<=8;j++){
        pi=c*(colonneplateau-1)+ligneplateau-1; //definit l'endroit p1 de  la grille ... je pense que ça marche ou pas
        if (j%3==0){
            pi=pi+c-2;//pour passer à la ligne suivante
        }
        printf("%d",pi);
        switch (plateau[pi]){
            case 'X':
                break;
            case '1':
                if (tuile[j]=='X'){
                    plateau[pi]='X';
                }
                else{
                    plateau[pi]=plateau[j]+tuile[j]-48;
                }
                break;
            case '2':
                if (tuile[j]=='X'){
                    plateau[pi]='X';
                }
                else{
                    plateau[pi]=plateau[pi]+tuile[j]-48;
                }
                break;
            case '3':
                if (tuile[j]=='X'){
                    plateau[pi]='X';
                }
                else{
                    plateau[pi]=plateau[pi]+tuile[j]-48;
                }
                break;
            case '4':
                if (tuile[j]=='X'){
                    plateau[pi]='X';
                }
                else{
                    plateau[pi]=plateau[pi]+tuile[j]-48;
                }
                break;
            case '5':
                if (tuile[j]=='X'){
                    plateau[pi]='X';
                }
                else{
                    plateau[pi]=plateau[pi]+tuile[j]-48;
                }
                break;

            default:
                break;
        }

    }

    afficher(tuile,3,3);
    afficher(plateau,l,c);


    //-->penser à generer une nouvelle tuile//
    return 0;
}
===========================================================================================================
ALGORITHME DE GENERATION DE TUILE

void afficher(char tab[], int w, int h){          // tab[] = *tab
    for (int i=0; i<(w*h); i++){
        if ((i%w) == 0){
            printf("\n");
        }
        printf("(%c)", tab[i]);
    }
}

int isInIndex(const int *tab, int e) {
    int i=0;
    int res=0;
    while(i<3 || res) {
        if(tab[i] == e) {
            res = 1;
        }
        i++;
    }
    return res;
}

void estdedans(char **tuile, int x, int y, int w, int h) {
    for (int i=0; i<=2; i++){
        for (int j=0; j<=2; j++){
            printf("a");
            //printf("%c", tuile[i][j]);
            if (tuile[i][j] == 0) {
                //continue;
            } else {
                if(y+i>=0 && y+i<=h+2){
                    if (x+j>=0 && x+j<=w+2){
                        printf("Le motif est dans la grille");
                    }
                }
            }
        }
    }
}

int main (){
    int w, h;
    srand(time(0));
/*
    printf("Veuillez rentrer le nombre de colonnes du tableau");
    scanf("%d", &w);
    printf("Veuillez rentrer le nombre de lignes du tableau");
    scanf("%d", &h);

    char *tab = (char*) malloc(sizeof(char) * w * h);
    for (int i=0; i<(w*h);i++){
        tab[i]=0;
    }
    afficher(tab,w,h);

    char *tab1 = (char*) malloc(sizeof(char) * 9);
    for (int i=0; i<9;i++){
        tab1[i]=0;
    }

    int chiffre=rand()%9;
    tab1[chiffre]='X';

    int combien=rand()%3+1;
    int index[combien];

    for(int i=0; i<combien; i++) {
        int marcel=rand()%9;
        while(marcel == chiffre) { //|| isInIndex(index, marcel, combien)) {
            marcel=rand()%9;
        }
        index[i]=marcel;
        tab1[index[i]]=1;
    }

    afficher(tab1,3,3);

    free(tab1);*/

    char tuile[3][3] = {{0,1,0},{0,0,0},{0,0,0}};


    estdedans((char **) tuile, 1, 1, 5, 5);



    return 0;
}